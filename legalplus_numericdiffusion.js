!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=27)}([function(e,t,n){"use strict";var r=n(1),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function u(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return u(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(0);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(0),o=n(16),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,s={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(u=n(5)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){s.headers[e]=r.merge(i)})),e.exports=s}).call(this,n(15))},function(e,t,n){"use strict";var r=n(0),o=n(17),i=n(2),a=n(19),u=n(22),s=n(23),c=n(6);e.exports=function(e){return new Promise((function(t,l){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";d.Authorization="Basic "+btoa(h+":"+m)}var g=a(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),i(g,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?u(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:n,config:e,request:p};o(t,l,r),p=null}},p.onabort=function(){p&&(l(c("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){l(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),l(c(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=n(24),y=(e.withCredentials||s(g))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;y&&(d[e.xsrfHeaderName]=y)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),l(e),p=null)})),void 0===f&&(f=null),p.send(f)}))}},function(e,t,n){"use strict";var r=n(18);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){t=t||{};var n={},o=["url","method","params","data"],i=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(o,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(i,(function(o){r.isObject(t[o])?n[o]=r.deepMerge(e[o],t[o]):void 0!==t[o]?n[o]=t[o]:r.isObject(e[o])?n[o]=r.deepMerge(e[o]):void 0!==e[o]&&(n[o]=e[o])})),r.forEach(a,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var u=o.concat(i).concat(a),s=Object.keys(t).filter((function(e){return-1===u.indexOf(e)}));return r.forEach(s,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){e.exports=n(10)},function(e,t,n){"use strict";var r=n(0),o=n(1),i=n(11),a=n(7);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var s=u(n(4));s.Axios=i,s.create=function(e){return u(a(s.defaults,e))},s.Cancel=n(8),s.CancelToken=n(25),s.isCancel=n(3),s.all=function(e){return Promise.all(e)},s.spread=n(26),e.exports=s,e.exports.default=s},function(e,t,n){"use strict";var r=n(0),o=n(2),i=n(12),a=n(13),u=n(7);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},s.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,n,o){return this.request(r.merge(o||{},{method:e,url:t,data:n}))}})),e.exports=s},function(e,t,n){"use strict";var r=n(0);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,n){"use strict";var r=n(0),o=n(14),i=n(3),a=n(4);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,c=[],l=!1,f=-1;function d(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=u(d);l=!0;for(var t=c.length;t;){for(s=c,c=[];++f<t;)s&&s[f].run();f=-1,t=c.length}s=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||l||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(0);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(6);e.exports=function(e,t,n){var o=n.config.validateStatus;!o||o(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(20),o=n(21);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(0),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(0);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(8);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";n.r(t);var r=n(9),o={baseUrl:"https://numericdiffusion-preprod.legalplus.fr",get apiUrl(){return"".concat(this.baseUrl,"/plugin")},get mediaUrl(){return"".concat(this.baseUrl,"/medias")}};function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.create,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o.apiUrl;if(i(this,e),!t)throw new Error("La clef de l'édition est manquante");this.axios=n({baseURL:a,timeout:5e3,headers:{"X-Legalplus-Tag":t}})}var t,n,u;return t=e,(n=[{key:"getAdverts",value:function(){return this.axios("/advert").then((function(e){return e.data}))}}])&&a(t.prototype,n),u&&a(t,u),e}(),s=new Map([[0,"janvier"],[1,"février"],[2,"mars"],[3,"avril"],[4,"mai"],[5,"juin"],[6,"juillet"],[7,"aout"],[8,"septembre"],[9,"octobre"],[10,"novembre"],[11,"décembre"]]);function c(e){if(!(e instanceof Date))throw new Error("dateHandler::dateToString : Le paramètre passé n'est pas une date");return"".concat(e.getDate()," ").concat(s.get(e.getMonth())," ").concat(e.getFullYear())}var l={dateToString:c,dateIsoToString:function(e){return c(new Date(e))},addDaysToDate:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=new Date(Number(e));return n.setDate(e.getDate()+t),n}};function f(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return d(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return d(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function d(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var p={addCategoryFilter:function(e,t){var n=[];e.forEach((function(e){var r=e.categories[0];if(-1==n.indexOf(r)){var o=document.createElement("option");o.text=r,t.add(o),n.push(r)}}))},addDateFilter:function(e,t){var n=[];e.forEach((function(e){var r=new Date(e.publication);if(r=l.dateToString(r),-1==n.indexOf(r)){var o=document.createElement("option");o.text=r,t.add(o),n.push(r)}}))},legalplusFilter:function(){var e,t=document.getElementById("legalplus-filter-categorie").value,n=document.getElementById("legalplus-filter-date").value,r=f(document.getElementsByClassName("legalplus-group"));try{for(r.s();!(e=r.n()).done;){var o=e.value;o.style.display="";var i,a=o.getElementsByClassName("legalplus-numeric-order"),u=0,s=0,c=f(a);try{for(c.s();!(i=c.n()).done;){var l=i.value;l.style.display="",""!=n&&l.dataset.date!=n&&(l.style.display="none",u++),""!=t&&l.dataset.categorie!=t&&(l.style.display="none",s++)}}catch(e){c.e(e)}finally{c.f()}u!=a.length&&s!=a.length||(o.style.display="none")}}catch(e){r.e(e)}finally{r.f()}}};function h(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return m(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,u=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return a=e.done,e},e:function(e){u=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(u)throw i}}}}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var g=function(){var e,t=document.getElementById("legalplus-search-input").value.toLowerCase(),n=h(document.getElementsByClassName("legalplus-group"));try{for(n.s();!(e=n.n()).done;){var r=e.value;r.style.display="";var o,i=r.getElementsByClassName("legalplus-numeric-order"),a=0,u=h(i);try{for(u.s();!(o=u.n()).done;){var s=o.value;s.style.display="";s.childNodes[0].innerHTML;""==t||s.innerHTML.toLowerCase().search(t)>-1||(s.style.display="none",a++)}}catch(e){u.e(e)}finally{u.f()}a==i.length&&(r.style.display="none")}}catch(e){n.e(e)}finally{n.f()}};function v(e,t){var n=document.createElement(e);return t.forEach((function(e){return n.classList.add(e)})),n}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=document.createElement("li");t.classList.add("legalplus-numeric-metadatas-element");var n=document.createElement("span");return n.innerHTML=e,t.appendChild(n),t}function b(e){var t,n,r,o,i,a,u,s,c,f,d,p=v("div",["legalplus-numeric-order"]),h=v("div",["legalplus-numeric-content"]);if(e.categories[0]&&(p.dataset.categorie=e.categories[0]),e.publication){var m=new Date(e.publication);p.dataset.date=l.dateToString(m)}return p.appendChild(function(e){var t=new Date(e.publication),n=l.dateToString(t),r="Publiée le ".concat(n," dans ").concat(e.edition.title),o=document.createElement("div");return o.classList.add("legalplus-numeric-metadatas","legalplus-numeric-metadatas-top"),o.innerHTML=r,o}(e)),(e.header||e.logo)&&h.appendChild(function(e,t){var n=v("div",["legalplus-numeric-header"]);if(t){var r=v("img",["legalplus-numeric-header-logo"]);r.setAttribute("alt","logo"),r.setAttribute("src",t.path),n.appendChild(r)}var o=v("div",["legalplus-header-content"]);return e&&(o.innerHTML=e,n.appendChild(o)),n}(e.header,e.logo)),e.surtitle&&h.appendChild((t=e.surtitle,n=v("div",["legalplus-numeric-surtitle"]),(r=v("span",["legalplus-numeric-surtitle-content"])).innerHTML=t,n.appendChild(r),n)),e.title&&h.appendChild((o=e.title,i=v("div",["legalplus-numeric-title"]),(a=v("span",["legalplus-numeric-title-content"])).innerHTML=o,i.appendChild(a),i)),e.subtitle&&h.appendChild((u=e.subtitle,s=v("div",["legalplus-numeric-subtitle"]),(c=v("span",["legalplus-numeric-subtitle-content"])).innerHTML=u,s.appendChild(c),s)),h.appendChild((f=e.body,(d=v("div",["legalplus-numeric-body"])).innerHTML=f,d)),p.appendChild(h),p.appendChild(function(e){var t=new Date(e.dateEndDisplay),n=l.dateToString(t),r=["Cette annonce sera visible jusqu'au ".concat(n,".")];e.transaction&&r.push("Numéro d'annonce : ".concat(e.transaction));var o=document.createElement("div");o.classList.add("legalplus-numeric-metadatas","legalplus-numeric-metadatas-bottom");var i=document.createElement("ul");return r.map(y).forEach((function(e){i.appendChild(e)})),o.appendChild(i),o}(e)),p}function w(e,t){var n=v("div",["legalplus-group"]);if(t){var r=v("div",["legalplus-group-title"]),o=v("h2",["legalplus-group-title-content"]);/\d{4}-[0-1]\d-[0-3]\d/g.test(t)&&(t=l.dateIsoToString(t)),o.innerHTML=t,r.appendChild(o),n.appendChild(r)}var i=v("div",["legalplus-group-content"]);e.map((function(e){return b(e)})).forEach((function(e){return i.appendChild(e)})),n.appendChild(i),this.push(n)}function E(e){if(!e.categories)throw new Error("L'annonce ".concat(e.uid," n'a pas de catégorie."));return e.categories[0]}function x(e,t,n){return e.get(n(t))||e.set(n(t),[]),e.get(n(t)).push(t),e}function C(e,t){return x(e,t,E)}function S(e){if(!e.publication)throw new Error("L'annonce ".concat(e.uid," n'a pas de date de publication."));var t=new Date(e.publication),n=6e4*t.getTimezoneOffset();return new Date(t.getTime()-n).toISOString().substring(0,10)}function T(e,t){return x(e,t,S)}function A(e,t){return x(e,t,(function(e){return!1}))}var j=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];switch(e){case"category":return t.reduce(C,new Map);case"none":return t.reduce(A,new Map);case"date":return t.reduce(T,new Map);default:throw new Error("Type de groupe inconnu : ".concat(e))}};function L(e){return function(e){if(Array.isArray(e))return O(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return O(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return O(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function R(e,t){return-1*e[0].localeCompare(t[0],"fr-FR")}var N=function(e){return function(e,t){return new Map(L(e.entries()).sort(t))}(e,R)};!function(e,t,n,r){var i,a,s=document.getElementById(t),c=document.getElementById(n),l=document.getElementById(r);if(!s)throw new Error("Le conteneur renseigné n'existe pas");new Promise((function(t){return t(function(e){return new u(e)}(e).getAdverts())})).then((function(e){return i=e.properties,a=e.adverts,e})).then((function(e){return function(){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return e.map((function(e){var t=Object.assign(e);return e.logo&&(t.logo.path="".concat(o.mediaUrl,"/").concat(e.logo.path)),t}))}(i,e.adverts)})).then((function(e){return j(i.displayMode,e)})).then((function(e){return N(e)})).then((function(e){return t=[],e.forEach(w,t),t;var t})).then((function(e){var t;return t=s,e.forEach((function(e){return t.appendChild(e)})),e})).then((function(e){return function(e){if(null!=e){var t=v("input",["legalplus-search"]);t.setAttribute("id","legalplus-search-input"),t.setAttribute("placeholder","Rechercher..."),t.addEventListener("keyup",g),e.appendChild(t)}}(l),e})).then((function(e){return function(e,t){if(null!=e){var n=v("label",["legalplus-filter-label"]);n.innerText="Filtres pour les annonces",e.appendChild(n);var r=v("select",["legalplus-filter-select"]);r.setAttribute("name","legalplus-filter-date"),r.setAttribute("id","legalplus-filter-date");var o=v("option",["legalplus-filter-option"]);o.text="Veuillez choisir une date",o.value="",o.setAttribute("defaultSelected","true"),r.add(o),p.addDateFilter(t,r),e.appendChild(r);var i=v("select",["legalplus-filter-select"]);i.setAttribute("name","legalplus-filter-categorie"),i.setAttribute("id","legalplus-filter-categorie");var a=v("option",["legalplus-filter-option"]);a.text="Veuillez choisir une catégorie",a.value="",a.setAttribute("defaultSelected","true"),i.add(a),p.addCategoryFilter(t,i),e.appendChild(i);var u=v("button",["legalplus-filter-btn"]);u.setAttribute("id","legalplus-filter-btn"),u.innerText="Filtrer",u.addEventListener("click",p.legalplusFilter),e.appendChild(u)}}(c,a),e})).catch((function(e){throw e}))}(document.currentScript.getAttribute("edition-key"),document.currentScript.getAttribute("container"),document.currentScript.getAttribute("filter-container"),document.currentScript.getAttribute("search-container"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,